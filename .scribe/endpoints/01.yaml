name: Auth
description: |-

  APIs for Auth management.
endpoints:
  -
    httpMethods:
      - POST
    uri: api/auth/login
    metadata:
      groupName: Auth
      groupDescription: |-

        APIs for Auth management.
      subgroup: ''
      subgroupDescription: ''
      title: 'User Login'
      description: 'Authenticate a user and generate a new authentication token.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: "The user's email address."
        required: true
        example: user@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: "The user's password."
        required: true
        example: secret123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      email: user@example.com
      password: secret123
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "token": "1|abc123tokenxyz",
            "role": "admin",
            "user": {
              "id": 1,
              "full_name": "John Doe",
              "email": "user@example.com",
              "gender": "male"
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: '{"message": "Unauthorized"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/auth/logout/{user_id}'
    metadata:
      groupName: Auth
      groupDescription: |-

        APIs for Auth management.
      subgroup: ''
      subgroupDescription: ''
      title: 'User Logout'
      description: |-
        Log out the user and delete their active tokens.

        ### Before using this endpoint:
        - Ensure the user is logged in.

        ### After using this endpoint:
        - The user's tokens will be revoked, logging them out.
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'The ID of the user to log out.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      user_id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"message": "Logged out"}'
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: '{"message": "User not found"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer Pa4cZbhd1V5ve3fgaE86kD6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/change-password
    metadata:
      groupName: Auth
      groupDescription: |-

        APIs for Auth management.
      subgroup: ''
      subgroupDescription: ''
      title: 'Change User Password'
      description: |-
        Update the user's password after verifying the current password.

        ### Before using this endpoint:
        - Provide the user's current password for verification.
        - Provide the new password.

        ### After using this endpoint:
        - The user's password will be updated to the new one.
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: "The user's email address."
        required: true
        example: user@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      current_password:
        name: current_password
        description: "The user's current password."
        required: true
        example: secret123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      new_password:
        name: new_password
        description: "The user's new password."
        required: true
        example: newsecret456
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      email: user@example.com
      current_password: secret123
      new_password: newsecret456
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"message": "Password changed successfully"}'
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: '{"message": "Current password is incorrect"}'
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: '{"message": "User not found"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer E45hZDga8Pfk1cvVebad663'
    controller: null
    method: null
    route: null
    custom: []
