name: Defect
description: |-

  APIs for Defect management.
endpoints:
  -
    httpMethods:
      - GET
    uri: api/defects
    metadata:
      groupName: Defect
      groupDescription: |-

        APIs for Defect management.
      subgroup: ''
      subgroupDescription: ''
      title: 'List Defects'
      description: |-
        Retrieve a paginated list of defects.

        Before using this endpoint:
        - Make sure defects have been logged in the system.

        After using this endpoint:
        - You will get a list of defects, filtered as needed.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":[{"id":36,"machine_id":25,"machine_name":"explicabo","machine_type":"CNC Machine","defect_type":"software","defect_time":"2024-10-19 16:03:36"},{"id":37,"machine_id":11,"machine_name":"aut","machine_type":"Stamping Press","defect_type":"electrical","defect_time":"2024-10-20 04:26:32"}],"links":{"first":"\/?page=1","last":"\/?page=1","prev":null,"next":null},"meta":{"current_page":1,"from":1,"last_page":1,"links":[{"url":null,"label":"&laquo; Previous","active":false},{"url":"\/?page=1","label":"1","active":true},{"url":null,"label":"Next &raquo;","active":false}],"path":"\/","per_page":10,"to":2,"total":2}}'
        headers: []
        description: ''
        custom: []
      -
        status: 200
        content: |-
          {
            "data": [
              {
                "id": 1,
                "name": "Defect 1",
                "machine_id": 1,
                "created_at": "2024-10-18T10:00:00.000000Z",
                "updated_at": "2024-10-18T10:00:00.000000Z"
              },
              ...
            ],
            "links": {...},
            "meta": {...}
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: '{"message": "Not found"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/defects/{defect_id}'
    metadata:
      groupName: Defect
      groupDescription: |-

        APIs for Defect management.
      subgroup: ''
      subgroupDescription: ''
      title: 'Show a Defect'
      description: |-
        Retrieve the details of a specific defect by ID.

        Before using this endpoint:
        - Ensure that the defect exists in the system.

        After using this endpoint:
        - You will receive detailed information about the selected defect.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      defect_id:
        name: defect_id
        description: 'The ID of the defect.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      defect_id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":{"id":38,"machine_id":22,"machine_name":"ut","machine_type":"Painting Robot","defect_type":"electrical","defect_time":"2024-10-21 05:03:07"}}'
        headers: []
        description: ''
        custom: []
      -
        status: 200
        content: |-
          {
            "id": 1,
            "name": "Defect 1",
            "machine_id": 1,
            "created_at": "2024-10-18T10:00:00.000000Z",
            "updated_at": "2024-10-18T10:00:00.000000Z"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: '{"message": "Not found"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/defects/{machine_id}'
    metadata:
      groupName: Defect
      groupDescription: |-

        APIs for Defect management.
      subgroup: ''
      subgroupDescription: ''
      title: 'Create a New Defect'
      description: |-
        Add a new defect associated with a specific machine.

        Before using this endpoint:
        - Ensure that the machine exists and is valid.
        - Provide necessary defect details.

        After using this endpoint:
        - A new defect will be created and associated with the machine.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      machine_id:
        name: machine_id
        description: 'The ID of the machine.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      machine_id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      defect_type:
        name: defect_type
        description: ''
        required: true
        example: mechanical
        type: string
        enumValues:
          - mechanical
          - electrical
          - software
        exampleWasSpecified: false
        nullable: false
        custom: []
      defect_time:
        name: defect_time
        description: 'Must be a valid date. Must be a valid date in the format <code>Y-m-d H:i:s</code>. Must be a date before <code>now</code>.'
        required: true
        example: '2010-05-05'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      defect_type: mechanical
      defect_time: '2010-05-05'
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":{"id":39,"machine_id":23,"machine_name":"nemo","machine_type":"Leak Test Machine","defect_type":"mechanical","defect_time":"2024-10-19 09:20:56"}}'
        headers: []
        description: ''
        custom: []
      -
        status: 201
        content: |-
          {
            "id": 1,
            "name": "Defect 1",
            "machine_id": 1,
            "created_at": "2024-10-18T10:00:00.000000Z",
            "updated_at": "2024-10-18T10:00:00.000000Z"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: '{"message": "Not found"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/defects/{defect_id}'
    metadata:
      groupName: Defect
      groupDescription: |-

        APIs for Defect management.
      subgroup: ''
      subgroupDescription: ''
      title: 'Update an Existing Defect'
      description: |-
        Modify the details of an existing defect.

        Before using this endpoint:
        - Ensure that the defect exists.
        - Provide updated defect details.

        After using this endpoint:
        - The defect's details will be updated in the system.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      defect_id:
        name: defect_id
        description: 'The ID of the defect.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      defect_id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      defect_type:
        name: defect_type
        description: ''
        required: false
        example: electrical
        type: string
        enumValues:
          - mechanical
          - electrical
          - software
        exampleWasSpecified: false
        nullable: false
        custom: []
      defect_time:
        name: defect_time
        description: 'Must be a valid date. Must be a date before <code>now</code>.'
        required: false
        example: '2016-07-13'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      defect_type: electrical
      defect_time: '2016-07-13'
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":{"id":40,"machine_id":49,"machine_name":"itaque","machine_type":"Leak Test Machine","defect_type":"mechanical","defect_time":"2024-10-20 15:58:51"}}'
        headers: []
        description: ''
        custom: []
      -
        status: 200
        content: |-
          {
            "id": 1,
            "name": "Updated Defect 1",
            "machine_id": 1,
            "created_at": "2024-10-18T10:00:00.000000Z",
            "updated_at": "2024-10-18T10:10:00.000000Z"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: '{"message": "Not found"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/defects/{defect_id}'
    metadata:
      groupName: Defect
      groupDescription: |-

        APIs for Defect management.
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete a Defect'
      description: |-
        Permanently remove a defect from the system.

        Before using this endpoint:
        - Ensure that the defect exists.

        After using this endpoint:
        - The defect will be removed from the system.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      defect_id:
        name: defect_id
        description: 'The ID of the defect.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      defect_id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"message": "Defect deleted"}'
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: '{"message": "Not found"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
